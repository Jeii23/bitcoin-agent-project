import os
import random
from typing import List, Dict, Optional
from psbt_creator import create_transaction_psbt

class BitcoinAIAgent:
    def __init__(self, xpub: str, network: str, shuffle_seed: Optional[int] = None):
        self.xpub = xpub
        self.network = network
        self.shuffle_seed = shuffle_seed

    def _shuffle_inputs_outputs(self, inputs: List[Dict], outputs: List[Dict]) -> Tuple[List[Dict], List[Dict]]:
        """Shuffle inputs and outputs deterministically based on the provided seed."""
        if self.shuffle_seed is not None:
            random.seed(self.shuffle_seed)
            random.shuffle(inputs)
            random.shuffle(outputs)
        return inputs, outputs

    def create_psbt(self, inputs: List[Dict], outputs: List[Dict], rbf: bool = True) -> Dict:
        """Create a PSBT with the specified inputs and outputs."""
        # Shuffle inputs and outputs if a seed is provided
        inputs, outputs = self._shuffle_inputs_outputs(inputs, outputs)

        # Prepare the PSBT creation parameters
        psbt_params = {
            'inputs': inputs,
            'outputs': outputs,
            'locktime': 0,
            'version': 2,
            'xpub': None,  # Omit GLOBAL_XPUB
            'return_dict': True,
            'include_derivations': False,  # Omit BIP32 keypaths
            'rbf': rbf,  # Enable RBF
            'prefer_legacy_witness_utxo': True,  # Prefer WITNESS_UTXO for legacy inputs
        }

        # Avoid small change by folding it into the fee
        total_output_value = sum(output['amount'] for output in outputs)
        total_input_value = sum(input['amount'] for input in inputs)
        change = total_input_value - total_output_value

        if change > 0 and change < DUST_THRESHOLD:
            # Adjust the output amounts to fold small change into the fee
            fee_adjustment = change
            # Here you can adjust the last output or any specific output
            outputs[-1]['amount'] += fee_adjustment

        # Create the PSBT
        psbt = create_transaction_psbt(**psbt_params)
        return psbt

# Example usage
if __name__ == "__main__":
    agent = BitcoinAIAgent(xpub="your_xpub_here", network="testnet", shuffle_seed=42)
    inputs = [{'txid': '...', 'vout': 0, 'amount': 100000}]  # Example input
    outputs = [{'address': '...', 'amount': 50000}]  # Example output
    psbt = agent.create_psbt(inputs, outputs)
    print(psbt)