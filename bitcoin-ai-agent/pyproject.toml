import random
import hashlib

class BitcoinAIAgent:
    def __init__(self, network: str, xpub: str):
        self.network = network
        self.xpub = xpub

    def create_psbt(self, inputs: List[Dict], outputs: List[Dict], shuffle_seed: Optional[int] = None, rbf: bool = False) -> Dict:
        # Shuffle inputs and outputs if a seed is provided
        if shuffle_seed is not None:
            random.seed(shuffle_seed)
            random.shuffle(inputs)
            random.shuffle(outputs)

        # Prepare the PSBT creator
        creator = PSBTCreator(network=self.network)

        # Set RBF by modifying the sequence number
        if rbf:
            for input in inputs:
                input['sequence'] = 0xFFFFFFFE  # RBF enabled sequence

        # Create the PSBT without GLOBAL_XPUB and BIP32 keypaths
        psbt = creator.create_psbt(
            inputs=inputs,
            outputs=outputs,
            include_global_xpub=False,
            include_keypaths=False,
            rbf=rbf
        )

        # Handle small change by folding it into the fee
        self._handle_small_change(outputs)

        return psbt

    def _handle_small_change(self, outputs: List[Dict]):
        """Fold small change into the fee if it's below a certain threshold."""
        DUST_THRESHOLD = 546  # in satoshis
        for output in outputs:
            if output['amount'] <= DUST_THRESHOLD:
                # Adjust the fee or remove the output
                output['amount'] = 0  # Remove the output
                # Here you might want to adjust the fee accordingly

    def derive_address_and_path(self, index: int, change: bool = False) -> Dict:
        # Derive address without BIP32 keypaths
        return derive_bitcoin_address(self.xpub, index=index, change=change, network=self.network)

# Example usage
async def main():
    agent = BitcoinAIAgent(network="testnet", xpub="your_xpub_here")
    inputs = [...]  # Define your inputs
    outputs = [...]  # Define your outputs
    shuffle_seed = 12345  # Example seed for shuffling
    psbt = agent.create_psbt(inputs, outputs, shuffle_seed=shuffle_seed, rbf=True)
    print(psbt)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())